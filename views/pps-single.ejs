<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Diecasting Chart</title>
    <style>
      body {
        font-family: "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        background-color: #f9fafb;
        padding: 20px;
        margin: 0;
        color: #333;
      }

      h1 {
        font-size: 32px;
        font-weight: 600;
        color: #222;
        text-align: center;
        margin-bottom: 30px;
      }

      #controls {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        margin-bottom: 25px;
        background: #ffffff;
        padding: 15px 20px;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      }

      #controls label {
        font-size: 20px;
        font-weight: 500;
      }

      #productSelect {
        font-size: 20px;
        padding: 6px 14px;
        border: 1px solid #d0d7de;
        border-radius: 8px;
        background: #fff;
        color: #333;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
      }

      #productSelect:hover {
        border-color: #9ca3af;
      }

      #controls button {
        font-size: 18px;
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        background-color: #e5e7eb;
        color: #111827;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.25s ease;
      }

      #controls button:hover {
        background-color: #d1d5db;
      }

      #chart {
        width: 100%;
        height: 600px;
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 15px;
      }

      /* Loading Spinner */
      #loading-spinner {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: 500;
        color: #555;
        height: 200px;
      }
       
    </style>
    <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
  </head>
  <body>
    <h1>Diecasting Eigenvalue Chart (1 Shot)</h1>

    <%- include("partials/loading") %>

    <div id="controls">
      <label for="productSelect">Product:</label>
      <select id="productSelect">
        <% ["LL","LR","ML","MR"].forEach(p => { %>
          <option value="<%= p %>" <%= p === type ? "selected" : "" %>><%= p %></option>
        <% }) %>
      </select>
      <button id="prevBtn">⬅ 上一個</button>
      <button id="nextBtn">下一個 ➡</button>
    </div>

    <div id="chart"></div>

    <div id="loading-spinner">Loading</div>

    <script>
      const chart = echarts.init(document.getElementById("chart"));
      let models = [];
      let currentIndex = 0;

      // --- Chart Option Builder ---
      function buildChartOption(model) {
        if (!model) return {};
        return {
          title: { text: `${model.type || "N/A"} - ${model.dt}` },
          legend: { data: ["Pressure", "Position", "Speed"], textStyle: { fontSize: 20 } },
          tooltip: {
            trigger: "axis",
            formatter: function (params) {
              let idx = params[0].dataIndex + 1;
              let tooltipText = `Index: ${idx}<br/>`;
              tooltipText += `Biscuit: ${model.sm}<br/>`;
              params.forEach((p) => {
                let displayValue =
                  p.seriesName === "Pressure" || p.seriesName === "Speed"
                    ? p.data / 15
                    : p.data;
                tooltipText += `<span style="display:inline-block;margin-right:5px;border-radius:50%;width:10px;height:10px;background-color:${p.color}"></span>`;
                tooltipText += `${p.seriesName}: ${displayValue}<br/>`;
              });
              return tooltipText;
            },
          },
          toolbox: { 
            show: true, 
            feature: { 
              dataZoom: { yAxisIndex: "none" },
              myrestore: {
                show: true,
                icon: `path://M512 0L1024 512 512 1024 0 512Z`,
                title: 'Reset Zoom',
                onclick: function () {
                  chart.dispatchAction({ type: 'dataZoom', start: 0, end: 100 });
                }
              }
            } 
          },
          dataZoom: [{ type: "inside", start: 0, end: 100 }],
          xAxis: {
            type: "category",
            boundaryGap: false,
            data: model.position.map((_, i) => i + 1),
            axisLabel: { fontSize: 20, rotate: 30 },
          },
          yAxis: { type: "value", axisLabel: { fontSize: 20 }, min: 0 },
          series: [
            { name: "Pressure", type: "line", data: (model.pressure || []).map(v => v * 15) },
            { name: "Position", type: "line", data: model.position || [] },
            { name: "Speed", type: "line", data: (model.speed || []).map(v => v * 15) },
          ],
        };
      }

      // --- Render Chart ---
      function renderChart() {
        if (models.length === 0) {
          chart.clear();
          chart.setOption({ title: { text: "No Data" } });
          return;
        }
        if (currentIndex >= models.length) currentIndex = models.length - 1;
        if (currentIndex < 0) currentIndex = 0;
        chart.setOption(buildChartOption(models[currentIndex]));
      }

      // --- Fetch Data ---
      function fetchData(type) {
        document.getElementById("loading-spinner").style.display = "block";

        chart.clear();
        fetch(`/pps/single/data?type=${type}`)
          .then(res => res.json())
          .then(({ models: m }) => {
            models = m;
            currentIndex = models.length > 0 ? models.length - 1 : 0;
            document.getElementById("loading-spinner").style.display = "none";
            renderChart();
          })
          .catch(err => {
            console.error(err);
            chart.clear();
            chart.setOption({ title: { text: "Error Loading Data" } });
            document.getElementById("loading-spinner").innerHTML = "⚠ Failed to load data!";
          });
      }

      // --- Product Change ---
      document.getElementById("productSelect").addEventListener("change", () => {
        const type = document.getElementById("productSelect").value;
        fetchData(type);
      });

      // --- Prev/Next ---
      document.getElementById("prevBtn").addEventListener("click", () => {
        currentIndex--; renderChart();
      });
      document.getElementById("nextBtn").addEventListener("click", () => {
        currentIndex++; renderChart();
      });

      // --- Initial Fetch ---
      fetchData("<%= type %>");
    </script>
  </body>
</html>
