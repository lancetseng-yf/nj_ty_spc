<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Diecasting Chart</title>
    <style>
      body {
        font-family: sans-serif;
        background-color: #f4f4f4;
        padding: 20px;
      }
      #controls {
        margin-bottom: 20px;
      }
      #chart {
        width: 100%;
        height: 600px;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
  </head>
  <body>
    <h1>Diecasting Eigenvalue Chart</h1>
    <div id="controls">
      <label for="productSelect">Product: </label>
      <select id="productSelect">
        <% ["LL","LR","ML","MR"].forEach(p => { %>
        <option value="<%= p %>"><%= p %></option>
        <% }) %>
      </select>
      <button id="prevBtn">上一個</button>
      <button id="nextBtn">下一個</button>
    </div>
    <div id="chart"></div>

    <script>
      const models = <%- JSON.stringify(models) %>;
      const productList = ["LL","LR","ML","MR"];

      // 排序 by dt
      models.sort((a,b) => new Date(a.dt) - new Date(b.dt));

      let currentIndex = 0;
      const chart = echarts.init(document.getElementById("chart"));

      function formatDateTime(dt) {
        const d = new Date(dt);
        const pad = (n) => (n < 10 ? "0" + n : n);
        return (
          d.getFullYear() + "/" +
          pad(d.getMonth() + 1) + "/" +
          pad(d.getDate()) + " " +
          pad(d.getHours()) + ":" +
          pad(d.getMinutes()) + ":" +
          pad(d.getSeconds())
        );
      }

      function renderChart(model) {
        if (!model) return;
        const option = {
          title: {
            text: `${model.type || "N/A"} - ${formatDateTime(model.dt)} (ID: ${model.diecasting_eigenvalue_data_id})`
          },
          tooltip: { trigger: 'axis' },
          legend: { data: ['Pressure','Position','Speed'] },
          toolbox: {
            show: true,
            feature: {
              dataZoom: { yAxisIndex: 'none' },
              dataView: { readOnly: false },
              restore: {},
            }
          },
          dataZoom: [
            { type: 'inside', start: 0, end: 100 },
          ],
          xAxis: {
            type: 'category',
            boundaryGap: false,
            data: model.position.map((_,i)=>i+1), // index 當 x 軸,
          },
          yAxis: { type: 'value' },
          series: [
            { name: 'Pressure', type: 'line', data: model.pressure || [] },
            { name: 'Position', type: 'line', data: model.position || [] },
            { name: 'Speed', type: 'line', data: model.speed || [] }
          ]
        };
        chart.setOption(option);
      }

      function filterByType(type) {
        return models.filter(m => m.type === type);
      }

      function updateChart() {
        const type = document.getElementById("productSelect").value;
        const filtered = filterByType(type);
        if (filtered.length === 0) {
          chart.clear();
          chart.setOption({ title:{ text:`No data for ${type}` } });
          return;
        }
        if (currentIndex >= filtered.length) currentIndex = filtered.length-1;
        if (currentIndex < 0) currentIndex = 0;
        renderChart(filtered[currentIndex]);
      }

      document.getElementById("productSelect").addEventListener("change", ()=>{
        currentIndex = 0;
        updateChart();
      });

      document.getElementById("prevBtn").addEventListener("click", ()=>{
        currentIndex--;
        updateChart();
      });

      document.getElementById("nextBtn").addEventListener("click", ()=>{
        currentIndex++;
        updateChart();
      });

      // 初始 render
      updateChart();
      window.addEventListener("resize", ()=>chart.resize());
    </script>
  </body>
</html>
