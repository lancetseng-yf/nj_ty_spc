<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>PPS Batch - Diecasting Data</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <style>
      body {
        font-family: "Segoe UI", sans-serif;
        background-color: #f9fafb;
        padding: 30px;
        color: #333;
      }

      h1 {
        font-size: 32px;
        font-weight: 600;
        color: #222;
        text-align: center;
        margin-bottom: 30px;
      }

      #controls {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        margin-bottom: 25px;
        background: #ffffff;
        padding: 15px 20px;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
      }

      #controls label {
        font-size: 18px;
        font-weight: 500;
      }

      #productSelect {
        font-size: 18px;
        padding: 6px 12px;
        border-radius: 6px;
        border: 1px solid #ccc;
        background-color: #fff;
        cursor: pointer;
        transition: border 0.2s;
      }

      #productSelect:hover {
        border-color: #888;
      }

      /* Chart container card */
      #chart {
        width: 100%;
        height: 600px;
        display: none; /* hidden until data loaded */
        background: #fff;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
      }

      /* Loading spinner wrapper */
      #loading-spinner {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: 500;
        color: #555;
        height: 200px;
      }
    </style>
  </head>
  <body>
    <div class="controls">
      <h1 class="mb-4">Diecasting Eigenvalue Data Chart - Batch</h1>

      <!-- Dropdown -->
      <div id="controls">
        <label for="productSelect">Product:</label>
        <select id="productSelect">
          <% ["LL","LR","ML","MR","ZP"].forEach(p => { %>
            <option value="<%= p %>" <%= p === type ? "selected" : "" %>><%= p %></option>
          <% }) %>
        </select>
      </div>
    <!-- Loading Partial -->
    <%- include('partials/loading') %>

    <!-- Chart -->
    <div id="chart"></div>

 <script>
  const chartEl = document.getElementById("chart");
  const loadingEl = document.getElementById("loading-spinner");
  const productSelect = document.getElementById("productSelect");
  const chart = echarts.init(chartEl);

  function fmtDateYMDHMS(d) {
    const pad = (n) => (n < 10 ? "0" + n : n);
    return `${d.getUTCFullYear()}/${pad(d.getUTCMonth() + 1)}/${pad(d.getUTCDate())} ${pad(d.getUTCHours())}:${pad(d.getUTCMinutes())}:${pad(d.getUTCSeconds())}`;
  }

  function buildTimeValuePairs(arr, dt, id) {
    const start = new Date(dt).getTime();
    const step = 1000 / 50; // 50Hz
    return arr.map((v, i) => ({ value: [new Date(start + i * step), v], diecastingId: id }));
  }

  function buildChartOption(models) {
    const posData = [], pressData = [], speedData = [];

    models.forEach((m) => {
      if (Array.isArray(m.position)) posData.push(...buildTimeValuePairs(m.position, m.dt, m.diecasting_eigenvalue_data_id), { value: [null, null] });
      if (Array.isArray(m.pressure)) pressData.push(...buildTimeValuePairs(m.pressure, m.dt, m.diecasting_eigenvalue_data_id), { value: [null, null] });
      if (Array.isArray(m.speed)) speedData.push(...buildTimeValuePairs(m.speed, m.dt, m.diecasting_eigenvalue_data_id), { value: [null, null] });
    });

    return {
      animation: false,
      tooltip: {
        trigger: "axis",
        axisPointer: { type: "cross" },
        formatter: (params) => {
          const time = params[0]?.value?.[0] ? fmtDateYMDHMS(new Date(params[0].value[0])) : "";
          const firstId = params[0]?.data?.diecastingId;
          const model = models.find((m) => m.diecasting_eigenvalue_data_id == firstId);
          const sm = model?.sm ?? "N/A";

          return `<b>Time:</b> ${time}<br>
                  <b>Biscuit:</b> ${sm}<br>` +
                 params.map(p => `${p.marker} ${p.seriesName}: ${p.seriesName === "Pressure" || p.seriesName === "Speed" ? (p.data.original ?? p.value[1]) : p.value[1]}`)
                       .join("<br>");
        },
      },
      legend: { top: 0, data: ["Position", "Pressure", "Speed"] , textStyle: { fontSize: 20 } },
      toolbox: {
        show: true,
        feature: {
          dataZoom: { yAxisIndex: "none" },
          myrestore: {
            show: true,
            icon: `path://M512 0L1024 512 512 1024 0 512Z`,
            title: "Reset Zoom",
            onclick: function () { chart.dispatchAction({ type: "dataZoom", start: 0, end: 100 }); }
          }
        },
      },
      xAxis: {
        type: "time",
        // name: "Time",
        // nameLocation: "middle",
        // nameGap: 50,
        nameTextStyle: { fontSize: 20, fontWeight: "bold", color: "#333" },
        splitLine: { show: true },
        axisLabel: { fontSize: 20, rotate: 30 },
       
      },
      yAxis: {
        type: "value",
        name: "Value",
        nameLocation: "middle",
        nameGap: 20,
        nameTextStyle: { fontSize: 20, fontWeight: "bold", color: "#333" },
        min: 0,
        splitLine: { show: true },
        axisLabel: { fontSize: 20 }
      },
      dataZoom: [
        { type: "slider", xAxisIndex: 0, filterMode: "none", bottom: 10 },
        { type: "inside", xAxisIndex: 0, filterMode: "none" }
      ],
      series: [
        { name: "Position", type: "line", smooth: true, showSymbol: false,  data: posData },
        { name: "Pressure", type: "line", smooth: true, showSymbol: false,  data: pressData.map(p => ({ value: [p.value[0], p.value[1] * 15], original: p.value[1], diecastingId: p.diecastingId })) },
        { name: "Speed", type: "line", smooth: true, showSymbol: false, data: speedData.map(p => ({ value: [p.value[0], p.value[1] * 15], original: p.value[1], diecastingId: p.diecastingId })) },
      ]
    };
  }

  function loadData(type) {
    loadingEl.style.display = "flex";
    chartEl.style.display = "none";

    fetch(`/pps/batch/data?type=${type}`)
      .then(res => res.json())
      .then(data => {
        const models = data.models || [];
        chart.setOption(buildChartOption(models));
        requestAnimationFrame(() => chart.resize());
      })
      .catch(err => { console.error(err); loadingEl.textContent = "❌ Failed to load data!"; })
      .finally(() => { loadingEl.style.display = "none"; chartEl.style.display = "block"; });
  }

  productSelect.addEventListener("change", e => loadData(e.target.value));
  loadData("<%= type %>");
</script>

  </body>
</html>
